* en queue operation :- data entring in queue .

* To enter the data we shift the rare of the queue ..

* Data will delete from the position of front and front will move forword after deletion and its calld D-queue... 

1 :- data will delete first.
2 :- then front will move forword.

* if front== rare it means it has only one element. and front and rare will be infinity..

------------- LINER QUEUE ----------------

------------- LL QUEUE -------------------

* MAKE 3 NODES :- FRONT , REAR , TEMP

* FRONT AND REAR WILL BE INITIALLY = NULL

* FIRST NODE DELETE ALWAYS.

* NODE WILL BE CREAT AT THE LAST .

* D-QUEUE OPERATION :-

struct lqueue{
    int data;
    struct lqueue*next;

}lq;
lq *front, *rear , *temp;

void init(){
    rear=front=NULL;
}

void enq(int x){

    temp= new node();
    if(tamp==null)
    return;
    temp->data=x;
    temp->next=null;
    if(rear==null)
}
{ 
    rear= front= temp;
}

else {
    rear->next=temp;
    rear=temp;
}

int deq(){

    int x;
    if(front==null)
    return;

  temp=front;
                                                  wifi pass   //global@0225
  if(front==rear)
  front=rear=null;
  else
  front=front->next;
  x=temp->data;
  temp->next=null;
  free(temp);
  return x;
}

int main(){

    init();
    Enq(10);
    Enq(20);
    Enq(30);
    Enq(40);
    Enq(50);
    cout<<Deq()<<endl;
    cout<<Deq()<<endl;
    cout<<Deq()<<endl;
    cout<<Deq()<<endl;
    cout<<Deq()<<endl;



    return 0;

}

* Qu:- take a array implement a stack and a quque in a single array .... 
user has choice to impliment either stack or queue .. and the pionter shuld be work as user define choice .
(Queue shuld not be affected)

-----------Circular Queue -----------

****** solution to use starting memeory of queue ********* 

* we fix the front ( do not move the front ) . 

* rare will down to the blank space in the queue . and the memeory will not be fill completely until all slots get full 

* in the deletion members will down to the blank part . 

^^^^^^^^^^^^^^ Programitically solution ^^^^^^^^^^
      
                 SOL - 2

***********make a circular queue******************

* make a circular queue like a pipe . 

* if difference between front and back is 1 so that means queue is actually full .  |R-F|== 1

* when a data memeber is delete so front is move forword towords the next dta member .

    2->3->4->0->1->2->3

    so |R-F|== 1 is false

* sol :- make the count of the queue so  count==0 

**************Data structural Solution deletion point of view  *************

* Consider a circular queue 

* we change the working of front .. ( make front == rare ) it means queue is empty .

* Before :- we were performing delition then f++. 

* now front++ then perform the delition .

* it means front will point position n-1 ( n shuld be delete) , then f++ , then delete n .

* Conclusion :- rare= front -> q is empty .

********* Insertion point of view ********

* if front= rear (empty condition and full condition is crash).

* if front is towords of rear it means (always n-1 ) . the last queue member will be always blank . 

* Before :- we were considiring 1 front and 1 rear .

* now we take 2 rear and 1 front . position of virtual rear will be +1 of normal rear.( R'==F) it meand queue is full .

* ( R==F) Queue is empty . 

************ PRACTICALLY CIRCULAR QUEUE IS NOT POSSIBLE TO implement DATA STRUCTUALY**********


******************* DeQue(Double Ended Queue) ***************       


* Insertion is possible from duble end is called DUBLE ENDED QUEUE. 

Qu :- make a Dqueue :- make a program in which insertion is allowed from both the end  . 

Qu :- insertion is only from one end and deletion is allowed from both the side ... front and rear both . 

( we have to check full condition )

Qu :- insertion and deletion is allowed from both the sides .


*************** NON LINEAR DATA STRUCTURE *************


********************** TREEEEE ************************

BINARY TREE :-  * Node can only have the adress of 2 other nodes...
                
                * Left and Right are Inter refrential pointer .

* Basic Terminoligy for TREE :- * A is called root.
                                * B is left son of A.
                                * c is right son of A.
                                * D is left son of B .
                                * E is right son of B.

                                * D & E are the left desendent ( vanshaj ) of A.                        ----------A----------1<- Level
                                * F is the right desendent of A.                                                /   \
                                * A is ensister of Ensister( poorvaj ) of E & F.                               /     \
                                * D & E are the siblings ( bhai bahan ).                                ------B-------C------2 
                                * F is leaf node( that dosent have left or right son).                      /   \   /   \
                                * C is a semi leaf ( that has only one son ).                              /     \ NULL  \ 
                                * All nodes from the roots are considerd in any perticular level .      --D-------E-------F--3
                                * A is in 0"th" Level .
                                * Heighest level of tree is 3 .( new level will be the highest level of the tree).
                                * Heighest level is also called as depth.
                                * TREE is non linear. 


*********************** BINARY SEARCH TREE ******************** 

* basic creation of tree is binary search tree. 

   father->data > L-son->data >= brother->data > father


                                     (50)
                                     /  \
                                  (20L) (70R)
                                 /   \   \   \
                                (10L)(40R)\    (80R)
                                     /     \       /
                                    (30L)   (50L)  (75L)
                                       \       \ 
                                       (35R)      (60R)    




 * Scheme of Traversing :- * tree based upon its traversal.      
                           
                           * IN ORDER TRAVERSAL:- left root right.

                           * PRE ORDER :- root left right.

                           * POST ORDER :- left right root.


    IN ORDER :- C,F,H,J,I,K,G,E,B,D,A,M,L,N,P,S,R,T,V,U,W,O,Q.

    POST:- J,K,I,H,G,F,E,C,D,B,M,S,V,W,U,T,R,P,Q,O,N,L,A.   


    ************** TRAVARSAL TO TREE CONVERSION *********** 

    IN ORDER :- 10,20,30,35,40,45,50,50,52,60,70,75,80

    PRE :-50,20,10,40,30,35,45,70,50,60,52,80,75

   
ASSIGNMENT Qu:- IN ORDER:- 45,50,60,62,65,70,72,75,80,90,100,105,110,120
                
                POST ORDER :- 45,50,62,65,60,75,72,90,80,105,120,110,100,70

                PRE ORDER :- ??


          DATE:- 01/07/2022      


                            ----------
                           |400|50|200| 
                            ----------
                           /          \
                          /            \
                ----------               ----------
                |N|30| N |               |300|70|N| 
                ----------               ----------
                                       / 
                                      /
                            ----------
                            |N|60| N | 
                            ----------   


 ***************** CODE FOR IINORDER *****************
 
 * recursive method :-

 void inorder(node* p){

    if(p!=NULL){
        inorder(p->left);
        cout<< p->data;
        cout<< p->right;
    }
 } 

 simple order 24,59,45,35,15,25,85,55,80,60,100,10,20,90,70,30,50 (Root).

 in Order :- 10,15,20,

 Qu :- find out the width of a TREE with the help of any given level.

 Qu :- ( Defoliation ) delete the all the leafs of the tree.

 Qu :- find the length of the TREE .   



 Defoliation method :- ( deletion technique of the nodes )


 case 1 :- deletion of last node which havinf NULL in left or right.

 * makea parent node which having the data of the node which has to be delete .

 * now check wether the delition node is left son of the parent node or right son . 

 * then ASSIGN NULL  to the side  and free the data which is deleted .



 case 2 :- delete a node whose left is NULL but right is not NULL.

 ( it is possible that the node is situated at parent right and left son )

 * target having a left son so 
 
 parent->left=target->right. then target->right=NULL 

 * if target havinf a right son so the son of target will plus with right of the parent of the target .

 parent->right=target->right => free target . 



 CASE 3 :- delete a node whose right is NULL and left is not NULL .

 * target having left son so

 parent of target->left -> left son of target .

 * target having right son 

 parent of target->right->right son of target . 

we will se it on monday 

CASE 4:- delete a node nither whose left is NULL not whose right NULL.   


 *****************Defoliation ***********

 void Defoliation(node*p){

    if(p!=NULL){
        if(p->leaf=NULL && p->right==NULL && p->visited==0){

 
          dtemp=p->parent;
          dtemp->visited=1;
          cout<<"Deleting :- " << p->data;
          delete(p);
          p=dtemp;
        }

        Defoliation(p->left);
        Defoliation(p->right);
    }
 }  

DATE :- 7/7/2022

Qu :- Find the level of TREE .

Qu :- Find the width of a TREE. (in a perticular level)

( TRAVERSE IN TH FULL TREE GET THE LVEL OF THE ALL NODE , AND IF THE LEVEL 
MATCHES WITH THE GIVIN LEVEL SO INCREASE THE WIDTH ;)


int getWidth* p , int lev, int w){
    int s;
    if(p!=NULL){
      l=0;
    s=getLevel(root, p->data);
    if(s==lev)
    w++;

    return getWidth(p->)

    }

}


* Right in threded binary TREE  :- if right of any node is NULL so we can no consider it as  NULL. 

* the use of THREDED BIARY TREE is to Speed UP the traveral time . 

* adding the inorder predisisser address in that position . 

Qu :- make a link list of a treee and if the the last node is the leaf of the tree 
so connect it in a link list automatically . 

Qu :- make a stack and a link list (link list having right data of the tree ) & 
( stack is having left data of the tree ) not take the data from stack and LL and put the data
in the tree accordingly . 



Date :-11/7/2022

*************** Multiway Search Tree ****************

* all the key will be stored in assending order . (sorted form )

* all the keys will be insertd till the node is not getting completely full .

* to add the new data value we add new node according the data value . 

       (    100    200    500   1000   )
                      \             \
                       \             \   
                        \             \  
             (  250   300   350   450) \    
                               \      (  1500        )
                                \ 
                                 \
                                  \
                                ( 375    ) 


* Balanced Multiway Tree ( B-TREE ) :-            ( DEFINATION )                    

A B-TREE  is a balanced multiway sraech  tree of order N in which every node can have 
maximum n-1 keys and it can have maximum n son's same as multiway search tree . Additionally 
in B-TREE every non rute node must have atleast(n-1)/2 keys .

************************Insertion Case's************************

* The smallest B-Tree is order(3)

  it contains :- 2 node and 3 son 

******************order 5 B-TREE*********************

                    k0     k1     k2      k3
D 1:-         (    200    800    1500    2000)
                              
*****************************************************************************
                    k0     k1     k2      k3
D 2:-         (    200    800    1500        )
                                      \
                                       \
                                        \
                                         \              
                                          ( 2000)


*******************************************************************************

D 3 :-                k0        k1 k2                k3
                               ( 1500  )
                                /     \
                               /       \
                              /         \
                             /           \ 
                            /             \
                  (  200  500  )      (  1600    2000 )  

                          (  800    1000)

*******************************************************************************

D 4 :-                k0        k1 k2                k3
                               ( 600         1500  )
                                /   |           \
                               /    |            \
                              L     |             \
                             /      R              \ 
                            /       |               \
                     ( 200  500 )   |             (  1600    2000 )  
                                    |
                        ( 700  800  1000  1200)
*******************************************************************************


D 5 :-                k0        k1 k2                k3
                               ( 600   800     1500  )
                                /   |    |       \
                               /    |    |        \
                              /     |    |         \
                             /      |    |          \ 
                            /       |    |           \
                     ( 200  500 )   |    |         (  1600    2000 )  
                                    |    |
                          ( 650   700)   |
                                       ( 1000   1200)

*****************************************************************************


D 6 :-                k0        k1 k2                k3
                               ( 600   800     1500  )
                                /   |    |       \
                               /    |    |        \
                              /     |    |         \
                             /      |    |          \ 
                            /       |    |           \
                     ( 200  500 )   |    |         (  1600    2000   2200   2500 )  
                                    |    |
                          ( 650   700)   |
                                       ( 1000   1200)

******************************************************************************


D 7 :-                k0        k1 k2                k3
                               ( 600   800     1500   2100)
                                /   |    |       \        \
                               /    |    |        \        \
                              /     |    |         \        \ 
                             /      |    |          \        \
                            /       |    |           \        \
                     ( 200  500 )   |    |    (  1600  2000 )  \    
                                    |    |                      \     
                          ( 650   700)   |                 (  2200   2500 )
                                       ( 1000   1200)
                    
******************************************************************************



D 8 :-                k0        k1 k2                k3

                                          (  800   )
                                          /        \
                                         /          \ 
                               ( 400   600)       (1500   2100)
                                /   |    |         |    |     |
                               /    |    |         |    |     |
                              /     |    |         |    |     |
                             /      |    |         |    |     |
                            /       |    |         |    |  (2200  2500) 
                   (  100  200  )   |    |         |    |  
                                    |    |         |    |        
                           ( 500  550)   |         |(1600  2000)
                                    ( 650  700)    |
                                                   |
                                            (  1000  1200)

s
******************************************************************************


insertion after (n-1 ) key. 
    
    * for that find out the mid key of the key .


* CASE 1 :-  if the upcoming key will be the greater then the mid key so the  case 1 occur.

 * start from (mid key +1 ) transfer the keys to the new node till then last keys 

 *  now the new key will be stored in their appropriate position.

 * now the mid key will considered as rute key and the ( mid key -1 and all key till the start ) 
  and ( mid key +1 keys till the end ) will be the left and right son of the mid key 
  and the mid key will be the rute of the keys.




* CASE 2 :-  if the upcoming key will be the Equal then the mid key so the  case 2 occur.

* the position of the new key is equal of the mid key 

* start from the mid key till the end key will be transffered to the new node .

* the new key will be stored in a appropriate position . 


* CASE 3 :-  if the upcoming key will be the smaller then the mid key so the  case 3 occur. 


*********all non rute have to contain (n-1)/2 key *******

Qu :- delte a key of  a node  whose having n-1/2 key .

logic:- easy delete it would be adjust by its size . 

Qu :- delete a key of a node whose having exactly (n-1)/2 key. (nothing else )

logic :- chehk weather its left or right brother having (n-1)/2 keys or not . if yes 
        it could having two condition 

        c 1:- if key if key is Deleting from left node so the right brother will give their
              left most key to parent and parent give their left most key to left son .

        c 2:- if key if key is Deleting from left node so the right brother will give their
              left most key to parent and parent give their left most key to left son .      
         
         
Qu :- delete a key whos having (n-1)/2 key and their brother also having exactly (n-1)/2 key. 

logic :- chehk weather its left or right brother having (n-1)/2 keys or not . but in this case
         it is not possible . 

         left son of parent node will have second left most key 

        
              (   500    1000    )
              /        \
             /          \    
            /            \
         (100 200)     (600 700)

         d2 :- 100 is deleted and left and right son are merged . 

                   
              (  1000  )
                /        
               /            
              /            
         ( 200 500 600 700)     

 Qu:- parent having only one key and left and right son having (n-1)/2 key exactyly.

                 ( 1000 )
                 /     \
                /       \
               /         \ 
         ( 600  700 )   (1200 1500)


         d2 :-  700 is deleted and all keys are parent now .

             ( 600 1000 1200 1500 )

*********************************************************************             

       *********************  ALGORITHM  *******************  

*********************************************************************


   * Algorithm is not a language

   * it is a standerd way to do programming without using any languag prefrence. 

*************************************************************************

       ************************* SORTING **********************

*************************************************************************

      *********************** BUBBLE SORTING **********************


            (pass 1)                           ( <=> :- swaping)
Sorting  :-     7   10   3   20   1
                
                7   10<=>3   20   1

                7   3   10   20   1

                7   3   10   20<=>1

        S 1     7<=>3   10   1   [20] 

                3   7   10   1   [20]

                3   7   10<=>1   [20]

                3   7<=>1   [10] [20]   

        S 2     3   1  [7]  [10] [20] 

                3<=>1  [7]  [10] [20]  

               [1] [3] [7]  [10] [20]  sorted


 Complexity :-   * time complexitiy

                 * Space complexitiy             

  Time Complexity :- first check how many variables in the code .

                     * A single variable will take 1 unit of time to exicute.

                     ( it is constant unit of time ) 

******************Calculation of Complexity**********************

algo sum( a , m , n)
{
  s=0;                                --> 1 time

  for i=0 to m-1 do  {                --> (m+1)  time 

    for j=0 to n-1 do {               --> m(n+1) time

        s=s+a[i,j];                   --> m*n time
    }
  }
     write (s);                       --> 1 time 
}

***********************************************************************

Asamtotic  Notation :-  A function (fn) **BIG-O** is called ( o (g(n))) if and only if 
      
                        f(n)<= c*g(n) !V n>=x 
                         
* we can not calculate exact Complexity of any Algorithm .

                ( can only be assumpted the unit of Algorithm )

* upper bound is represented in the form of  Big O  

* lowe Bound is represented in the form of _n_ 

   3n+5 >= 2 n                   --> is called Omega 

  c ( 1*g(n)) <= f(n) <=(2*g(n)) !Vn>=x

   2n <= 3n+5 <= 8n              --> is called exact bound 


* Bubble sort :- the Complexity of the Bubble sort is o(n) .

*******************************************************************************

    ********************** Selection Sorting ******************************

*******************************************************************************

void selection ( int a[], int n){

    int i,j, large, index;

    for(i=n-1;i>0;i--){

        large=a[0];
        index=0;
        for (j=1; j<=i; j++){

            if(a[j]>large){

                large=a[j];
                index=j;
            }
        }
        a[index]=a[i];
        a[i]=large;
    }
}

****************************************************************************
  
  * Selection Sorting :- 

  * assume that first element is larger element of the list .


                            ( index variable)
                        10    7    18    9    2

                      l=10

look forword that any no is larger then l so 

                      l=18  

 again look forword that any no is larger then l so


                        10    7    2    9    i

                        10    7    2    9   (18)

                      l=10

again look forword that any no is larger then l so

                        10    7    2    9   (18) 

                        9    7    2    (10) (18) 
                        id        i

                        now the 2 i are set to their appropriate position

                       l=9 

again look forword that any no is larger then l so

                         9    7    2  (10)  (18)

                         7    2   (9) (10)  (18)
                         id   i
                         
                        now the 3 i are set to their appropriate position

                        l=7

again look forword that any no is larger then l so

                         7    2  (9)  (10)  (18)

                        (2)  (7) (9)  (10)  (18)   

****************************************************************************

*****************************insertion Sort ************************

***************************************************************************

 void insertion(int a[], int n){

    int i,j,tamp=0;

    for(i=1;i<=n-1;i++){

        if(a[i]<a[i-1]){

            j=i;
            temp=a[i];
            do{
                a[j]=a[j-1];
                j--;
            }
            while(j>0 && a[j-1]>temp);

            a[j]=temp;
        }
    }
 }

 ***************************************************************************

Insertion sort :-

                               j
                         15<=> 7    9    6    3

                      l=7
                        
                        j
                        15    15    9    6    3  

                        7     15    9    6    3
                       ---------------------------
                                    j
                        7     15    9    6    3    

                       t=9
                              j
                        7     15<=>15    6    3 
                        j
                        7     9    15    6    3
                        ---------------------------
                                         j
                        7     9    15    6    3

                        t=6

                        7     9    15<=> 15   3

                        7     9    9     15   3
                        ----------------------------
                                              j
                        7     7    9     15   3

                        t=3

                        6     7    9     15<=>3   

                        6     7    9     9    15  
                        ------------------------
                                       
                        3     6    7    9    15 

 ********************************************************************************                    


Qu :- convert a array to a tree & convert a tree to an array . 

  ------------------------ Array to Tree conversion--------------------


          ------------------------------------
          | 10 | 03 | 12 | 30 | 20 | 45 | 50 |
          ------------------------------------

                 (10)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
            (3)       (12)                                 Father => (i-1)/2
           /   \     /    \
         (30) (20) (45)   (50)



 * Min shuld be converted in max.

 *                               

  heep sorting :- 

                f(10)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           s(3)       (12)                                 Father => (i-1)/2
           /   \     /    \
         (30) (20) (45)   (50)

         check father is < son or not if yes so swap .... or no swap 


                f(10)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           s(3)       (12)                                 Father => (i-1)/2
           /   \     /    \
         (30) (20) (45)   (50)

    now it will check left and compare

                 (10)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           f(3)       (12)                                 Father => (i-1)/2
           /   \     /    \
        s(30) (20) (45)   (50)

     check if father is < son so swap 


                 f(10)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           s(30)      (12)                                 Father => (i-1)/2
           /   \     /    \
        (3 ) (20) (45)   (50)
         

     check if father is < son so swap    

                f(30)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           s(10)      (12)                                 Father => (i-1)/2
           /   \     /    \
        (3 ) (20) (45)   (50)


     check if father is < son so swap    

                 (30)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           f(10)      (12)                                 Father => (i-1)/2
           /   \     /    \
        (3 ) s(20) (45)   (50)


     check if father is < son so swap    

                f(30)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           s(20)      (12)                                 Father => (i-1)/2
           /   \     /    \
        (3 )  (10) (45)   (50)



     check if father is < son so swap    

                 (30)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           (20)      f(12)                                 Father => (i-1)/2
           /   \     /    \
        (3 )  (10)s(45)   (50)


     check if father is < son so swap    

                f(30)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           (20)      s(45)                                 Father => (i-1)/2
           /   \     /    \
        (3 )  (10) (12)   (50)        

     check if father is < son so swap    

                 (45)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           (20)      f(30)                                 Father => (i-1)/2
           /   \     /    \
        (3 )  (10) (12)  s(50)         

     check if father is < son so swap    

                f(45)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           (20)      s(50)                                 Father => (i-1)/2
           /   \     /    \
        (3 )  (10) (12)  (30)   

 check if father is < son so swap    

                f(50)                                      left son => i*2+1
                /    \
               /      \                                    Right son => i*2+2
              /        \ 
           (20)      s(45)                                 Father => (i-1)/2
           /   \     /    \
        (3 )  (10) (12)  (30)     




          ------------------------------------
          | 50 | 20 | 45 | 03 | 10 | 12 | 30 |
          ------------------------------------  

 * Now conver it to min heep 

          
                 (50)                                      
                /    \
               /      \                                    
              /        \ 
           (20)       (45)                                 
           /   \     /    \
        (3 )  (10) (12)  (30)   

        

/*  int HeapSort( int arr[], int n)  {

        int f,s,x,t;

        for( int i=1; i<n; i++){
            s=i;
            f=(s-1)/2;
            x=a[i];

            while(s>0 && a[f]<x){
                a[s]=a[f];
                s=f;
                f=(s-1)/2;
            }
            a[s]=x;
        }
        s[f]=x;

    }

    // Sorting 

    for(i=n-1;i>0;i--){

        x=a[i];
        a[i]=a[0];
        f=0;
        if(i>1)
        s=1;
        else
        s=-1;
        if(i>2 && a[s+1]>a[s])
        s=2;
        while(s>=0 && a[s]>x){

            a[f]=a[s];
            f=s;
            s=2*f+1;

            if(a[s+1]>a[s] && s+1<=i-1)

            s+=1;
            if(s>i-1)
            s=-1;
        }
        a[f]=x;
    } */

    